{"version":3,"file":"avalanche-js-account.cjs.development.js","sources":["../src/utils.ts","../src/account.ts","../src/wallet.ts","../src/hdnode.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module avalanche-account\n * @hidden\n */\n\nimport { HttpProvider, Messenger } from 'avalanche-js-network';\nimport { ChainType, ChainID } from 'avalanche-js-utils';\n\nexport const defaultMessenger = new Messenger(\n  new HttpProvider('http://localhost:9500'),\n  ChainType.Avalanche,\n  ChainID.HmyLocal,\n);\n","/**\n * @packageDocumentation\n * @module avalanche-account\n *\n */\n\nimport {\n  generatePrivateKey,\n  getAddressFromPrivateKey,\n  getPubkeyFromPrivateKey,\n  // toChecksumAddress,\n  encrypt,\n  decrypt,\n  EncryptOptions,\n  Keystore,\n  Signature,\n  getAddress,\n} from 'avalanche-js-crypto';\n\nimport {\n  isPrivateKey,\n  add0xToString,\n  hexToNumber,\n  AddressSuffix,\n  ChainType,\n} from 'avalanche-js-utils';\nimport { Transaction, RLPSign } from 'avalanche-js-transaction';\nimport { StakingTransaction } from 'avalanche-js-staking';\nimport { Messenger, RPCMethod } from 'avalanche-js-network';\nimport { Shards } from './types';\nimport { defaultMessenger } from './utils';\n\nexport interface Balance {\n  balance?: string;\n  nonce?: number;\n  shardID?: number;\n}\n\nclass Account {\n  /**\n   * static method create account\n   *\n   * @example\n   * ```javascript\n   * const account = new Account();\n   * console.log(account);\n   * ```\n   */\n  static new(): Account {\n    const newAcc = new Account()._new();\n    return newAcc;\n  }\n  /**\n   * Static Method: add a private key to Account\n   * @param  {string} key - private Key\n   *\n   * @example\n   * ```javascript\n   * const account = new Account.add(key_1);\n   * console.log(account);\n   * ```\n   */\n  static add(key: string): Account {\n    const newAcc = new Account()._import(key);\n    return newAcc;\n  }\n\n  /**@hidden */\n  privateKey?: string;\n  /**@hidden */\n  publicKey?: string;\n  /**@hidden */\n  address?: string;\n  /**@hidden */\n  balance?: string = '0';\n  /**@hidden */\n  nonce?: number = 0;\n  /**@hidden */\n  shardID: number;\n  /**@hidden */\n  shards: Shards;\n  /**@hidden */\n  messenger: Messenger;\n  /**@hidden */\n  encrypted: boolean = false;\n\n  /**\n   * check sum address\n   *\n   * @example\n   * ```javascript\n   * console.log(account.checksumAddress);\n   * ```\n   */\n  get checksumAddress(): string {\n    return this.address ? getAddress(this.address).checksum : '';\n  }\n\n  /**\n   * Get bech32 Address\n   *\n   * @example\n   * ```javascript\n   * console.log(account.bech32Address);\n   * ```\n   */\n  get bech32Address(): string {\n    return this.address ? getAddress(this.address).bech32 : '';\n  }\n\n  /**\n   * get Bech32 TestNet Address\n   *\n   * @example\n   * ```javascript\n   * console.log(account.bech32TestNetAddress);\n   * ```\n   */\n  get bech32TestNetAddress(): string {\n    return this.address ? getAddress(this.address).bech32TestNet : '';\n  }\n\n  /**\n   * get Shards number with this Account\n   *\n   * @example\n   * ```javascript\n   * console.log(account.getShardsCount);\n   * ```\n   */\n  get getShardsCount(): number {\n    return this.shards.size;\n  }\n\n  /**\n   * Generate an account object\n   *\n   * @param key import an existing privateKey, or create a random avax\n   * @param messenger you can setMessage later, or set message on `new`\n   *\n   * @example\n   * ```javascript\n   * // import the Account class\n   * const { Account } = require('avalanche-js-account');\n   *\n   * // Messenger is optional, by default, we have a defaultMessenger\n   * // If you like to change, you will import related package here.\n   * const { HttpProvider, Messenger } = require('avalanche-js-network');\n   * const { ChainType, ChainID } = require('avalanche-js-utils');\n   *\n   * // create a custom messenger\n   * const customMessenger = new Messenger(\n   *   new HttpProvider('http://localhost:9500'),\n   *   ChainType.Avalanche, // if you are connected to Avalanche's blockchain\n   *   ChainID.HmyLocal, // check if the chainId is correct\n   * )\n   *\n   * // setMessenger later\n   * const randomAccount = new Account()\n   * randomAccount.setMessenger(customMessenger)\n   *\n   * // or you can set messenger on `new`\n   * const randomAccountWithCustomMessenger = new Account(undefined, customMessenger)\n   *\n   * // NOTED: Key with or without `0x` are accepted, makes no different\n   * // NOTED: DO NOT import `mnemonic phrase` using `Account` class, use `Wallet` instead\n   * const myPrivateKey = '0xe19d05c5452598e24caad4a0d85a49146f7be089515c905ae6a19e8a578a6930'\n   * const myAccountWithMyPrivateKey = new Account(myPrivateKey)\n   * ```\n   */\n  constructor(key?: string, messenger: Messenger = defaultMessenger) {\n    this.messenger = messenger;\n    if (!key) {\n      this._new();\n    } else {\n      this._import(key);\n    }\n    this.shardID = this.messenger.currentShard || 0;\n    this.shards = new Map();\n    this.shards.set(this.shardID, {\n      address: `${this.bech32Address}${AddressSuffix}0`,\n      balance: this.balance || '0',\n      nonce: this.nonce || 0,\n    });\n  }\n\n  async toFile(password: string, options?: EncryptOptions): Promise<string> {\n    if (this.privateKey && isPrivateKey(this.privateKey)) {\n      const file = await encrypt(this.privateKey, password, options);\n      this.privateKey = file;\n      this.encrypted = true;\n      return file;\n    } else {\n      throw new Error('Encryption failed because PrivateKey is not correct');\n    }\n  }\n\n  async fromFile(keyStore: string, password: string): Promise<Account> {\n    try {\n      if (typeof password !== 'string') {\n        throw new Error('you must provide password');\n      }\n      const file: Keystore = JSON.parse(keyStore.toLowerCase());\n      const decyptedPrivateKey = await decrypt(file, password);\n      if (isPrivateKey(decyptedPrivateKey)) {\n        return this._import(decyptedPrivateKey);\n      } else {\n        throw new Error('decrypted failed');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get the account balance\n   *\n   * @param blockNumber by default, it's `latest`\n   *\n   * @example\n   * ```javascript\n   * account.getBalance().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  async getBalance(blockNumber: string = 'latest'): Promise<Balance> {\n    try {\n      if (this.messenger) {\n        const balance = await this.messenger.send(\n          RPCMethod.GetBalance,\n          [this.address, blockNumber],\n          this.messenger.chainPrefix,\n          this.messenger.currentShard || 0,\n        );\n\n        const nonce = await this.messenger.send(\n          RPCMethod.GetTransactionCount,\n          [this.address, blockNumber],\n          this.messenger.chainPrefix,\n          this.messenger.currentShard || 0,\n        );\n        if (balance.isError()) {\n          throw balance.error.message;\n        }\n        if (nonce.isError()) {\n          throw nonce.error.message;\n        }\n\n        this.balance = hexToNumber(balance.result);\n        this.nonce = Number.parseInt(hexToNumber(nonce.result), 10);\n        this.shardID = this.messenger.currentShard || 0;\n      } else {\n        throw new Error('No Messenger found');\n      }\n      return {\n        balance: this.balance,\n        nonce: this.nonce,\n        shardID: this.shardID,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * @function updateShards\n   */\n  async updateBalances(blockNumber: string = 'latest'): Promise<void> {\n    // this.messenger.setShardingProviders();\n    const shardProviders = this.messenger.shardProviders;\n    if (shardProviders.size > 1) {\n      for (const [name, val] of shardProviders) {\n        const balanceObject = await this.getShardBalance(val.shardID, blockNumber);\n        await this.shards.set(name === val.shardID ? name : val.shardID, balanceObject);\n      }\n    } else {\n      const currentShard = await this.getShardBalance(\n        this.messenger.currentShard || 0,\n        blockNumber,\n      );\n      this.shards.set(this.messenger.currentShard || 0, currentShard);\n    }\n  }\n\n  /**\n   * @function signTransaction\n   */\n  async signTransaction(\n    transaction: Transaction,\n    updateNonce: boolean = true,\n    encodeMode: string = 'rlp',\n    blockNumber: string = 'latest',\n  ): Promise<Transaction> {\n    if (!this.privateKey || !isPrivateKey(this.privateKey)) {\n      throw new Error(`${this.privateKey} is not found or not correct`);\n    }\n\n    if (updateNonce) {\n      // await this.updateBalances(blockNumber);\n      const txShardID = transaction.txParams.shardID;\n      const shardNonce = await this.getShardNonce(\n        typeof txShardID === 'string' ? Number.parseInt(txShardID, 10) : txShardID,\n        blockNumber,\n      );\n      transaction.setParams({\n        ...transaction.txParams,\n        from:\n          this.messenger.chainPrefix === ChainType.Avalanche\n            ? this.bech32Address\n            : this.checksumAddress || '0x',\n        nonce: shardNonce,\n      });\n    }\n\n    if (encodeMode === 'rlp') {\n      const [signature, rawTransaction]: [Signature, string] = RLPSign(\n        transaction,\n        this.privateKey,\n      );\n      return transaction.map((obj: any) => {\n        return {\n          ...obj,\n          signature,\n          rawTransaction,\n          from:\n            this.messenger.chainPrefix === ChainType.Avalanche\n              ? this.bech32Address\n              : this.checksumAddress || '0x',\n        };\n      });\n    } else {\n      // TODO: if we use other encode method, eg. protobuf, we should implement this\n      return transaction;\n    }\n  }\n\n  /**\n   * This function is still in development, coming soon!\n   *\n   * @param staking\n   * @param updateNonce\n   * @param encodeMode\n   * @param blockNumber\n   * @param shardID\n   */\n  async signStaking(\n    staking: StakingTransaction,\n    updateNonce: boolean = true,\n    encodeMode: string = 'rlp',\n    blockNumber: string = 'latest',\n    shardID: number = this.messenger.currentShard,\n  ): Promise<StakingTransaction> {\n    if (!this.privateKey || !isPrivateKey(this.privateKey)) {\n      throw new Error(`${this.privateKey} is not found or not correct`);\n    }\n\n    if (updateNonce) {\n      // await this.updateBalances(blockNumber);\n      const txShardID = shardID;\n      const shardNonce = await this.getShardNonce(\n        typeof txShardID === 'string' ? Number.parseInt(txShardID, 10) : txShardID,\n        blockNumber,\n      );\n      staking.setFromAddress(\n        this.messenger.chainPrefix === ChainType.Avalanche\n          ? this.bech32Address\n          : this.checksumAddress || '0x',\n      );\n      staking.setNonce(shardNonce);\n    }\n\n    if (encodeMode === 'rlp') {\n      const [signature, rawTransaction]: [Signature, string] = staking.rlpSign(this.privateKey);\n      staking.setRawTransaction(rawTransaction);\n      staking.setSignature(signature);\n      staking.setFromAddress(\n        this.messenger.chainPrefix === ChainType.Avalanche\n          ? this.bech32Address\n          : this.checksumAddress || '0x',\n      );\n\n      return staking;\n    } else {\n      // TODO: if we use other encode method, eg. protobuf, we should implement this\n      return staking;\n    }\n  }\n\n  /**\n   * @param messenger\n   *\n   * @example\n   * ```javascript\n   * // create a custom messenger\n   * const customMessenger = new Messenger(\n   *   new HttpProvider('http://localhost:9500'),\n   *   ChainType.Avalanche, // if you are connected to Avalanche's blockchain\n   *   ChainID.HmyLocal, // check if the chainId is correct\n   * )\n   *\n   * // to create an Account with random privateKey\n   * // and you can setMessenger later\n   * const randomAccount = new Account()\n   * randomAccount.setMessenger(customMessenger)\n   * ```\n   */\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n\n  /**\n   * Get account address from shard ID\n   * @param shardID\n   *\n   * @example\n   * ```javascript\n   * console.log(account.getAddressFromShardID(0));\n   *\n   * > avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7-0\n   * ```\n   */\n  getAddressFromShardID(shardID: number) {\n    const shardObject = this.shards.get(shardID);\n    if (shardObject) {\n      return shardObject.address;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Get all shards' addresses from the account\n   *\n   * @example\n   * ```javascript\n   * console.log(account.getAddresses());\n   * ```\n   */\n  getAddresses(): string[] {\n    const addressArray: string[] = [];\n    for (const [name, val] of this.shards) {\n      const index: number = typeof name === 'string' ? Number.parseInt(name, 10) : name;\n      addressArray[index] = val.address;\n    }\n    return addressArray;\n  }\n\n  /**\n   * Get the specific shard's balance\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @param blockNumber by default, it's `latest`\n   *\n   * @example\n   * ```\n   * account.getShardBalance().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  async getShardBalance(shardID: number, blockNumber: string = 'latest') {\n    const balance = await this.messenger.send(\n      RPCMethod.GetBalance,\n      [this.address, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n\n    const nonce = await this.messenger.send(\n      RPCMethod.GetTransactionCount,\n      [this.address, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n\n    if (balance.isError()) {\n      throw balance.error.message;\n    }\n    if (nonce.isError()) {\n      throw nonce.error.message;\n    }\n    return {\n      address: `${this.bech32Address}${AddressSuffix}${shardID}`,\n      balance: hexToNumber(balance.result),\n      nonce: Number.parseInt(hexToNumber(nonce.result), 10),\n    };\n  }\n\n  /**\n   * Get the specific shard's nonce\n   *\n   * @param shardID `shardID` is binding with the endpoint, IGNORE it!\n   * @param blockNumber by default, it's `latest`\n   *\n   * @example\n   * ```\n   * account.getShardNonce().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n  async getShardNonce(shardID: number, blockNumber: string = 'latest') {\n    const nonce = await this.messenger.send(\n      RPCMethod.GetAccountNonce,\n      [this.address, blockNumber],\n      this.messenger.chainPrefix,\n      shardID,\n    );\n    if (nonce.isError()) {\n      throw nonce.error.message;\n    }\n    return nonce.result;\n  }\n\n  /**\n   * @function _new private method create Account\n   * @return {Account} Account instance\n   * @ignore\n   */\n  private _new(): Account {\n    const prv = generatePrivateKey();\n    if (!isPrivateKey(prv)) {\n      throw new Error('key gen failed');\n    }\n    return this._import(prv);\n  }\n\n  /**\n   * @function _import private method import a private Key\n   * @param  {string} key - private key\n   * @return {Account} Account instance\n   * @ignore\n   */\n  private _import(key: string): Account {\n    if (!isPrivateKey(key)) {\n      throw new Error(`${key} is not PrivateKey`);\n    }\n    this.privateKey = add0xToString(key);\n    this.publicKey = getPubkeyFromPrivateKey(this.privateKey);\n    this.address = getAddressFromPrivateKey(this.privateKey);\n    this.shardID = this.messenger.currentShard || 0;\n    this.shards = new Map();\n    this.shards.set(this.shardID, {\n      address: `${this.bech32Address}${AddressSuffix}0`,\n      balance: this.balance || '0',\n      nonce: this.nonce || 0,\n    });\n    this.encrypted = false;\n    return this;\n  }\n}\n\n/**\n * This comment _supports_ [Markdown](https://marked.js.org/)\n */\nexport { Account };\n","/**\n * @packageDocumentation\n * @module avalanche-account\n */\n\nimport { bip39, hdkey, EncryptOptions, getAddress, generatePrivateKey } from 'avalanche-js-crypto';\nimport { Messenger } from 'avalanche-js-network';\nimport { isPrivateKey, isAddress, ChainType } from 'avalanche-js-utils';\nimport { Transaction } from 'avalanche-js-transaction';\nimport { StakingTransaction } from 'avalanche-js-staking';\nimport { Account } from './account';\nimport { defaultMessenger } from './utils';\n\nclass Wallet {\n  // static method generate Mnemonic\n  static generateMnemonic(): string {\n    return bip39.generateMnemonic();\n  }\n\n  /** @hidden */\n  messenger: Messenger;\n  /** @hidden */\n  protected defaultSigner?: string;\n  /**\n   * @hidden\n   */\n  private accountMap: Map<string, Account> = new Map();\n\n  /**\n   * get acounts addresses\n   *\n   * @return {string[]} accounts addresses\n   *\n   * @example\n   * ```javascript\n   * const wallet = new Wallet(customMessenger);\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   *\n   * console.log(wallet.accounts);\n   * ```\n   */\n  get accounts(): string[] {\n    return [...this.accountMap.keys()];\n  }\n\n  /**\n   * get the signer of the account, by default, using the first account\n   *\n   * @example\n   * ```javascript\n   * const wallet = new Wallet(customMessenger);\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   *\n   * console.log(wallet.signer)\n   * ```\n   */\n  get signer(): Account | undefined {\n    if (this.defaultSigner) {\n      return this.getAccount(this.defaultSigner);\n    } else if (!this.defaultSigner && this.accounts.length > 0) {\n      this.setSigner(this.accounts[0]);\n      return this.getAccount(this.accounts[0]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @example\n   * ```\n   * const { Wallet } = require('avalanche-js-account');\n   * const { HttpProvider, Messenger } = require('avalanche-js-network');\n   * const { ChainType, ChainID } = require('avalanche-js-utils');\n   *\n   * // create a custom messenger\n   * const customMessenger = new Messenger(\n   *   new HttpProvider('http://localhost:9500'),\n   *   ChainType.Avalanche, // if you are connected to Avalanche's blockchain\n   *   ChainID.HmyLocal, // check if the chainId is correct\n   * )\n   *\n   * const wallet = new Wallet(customMessenger);\n   * ```\n   */\n  constructor(messenger: Messenger = defaultMessenger) {\n    this.messenger = messenger;\n  }\n  /**\n   * @function newMnemonic\n   * @memberof Wallet\n   * @return {string} Mnemonics\n   */\n  newMnemonic(): string {\n    return Wallet.generateMnemonic();\n  }\n\n  /**\n   * Add account using Mnemonic phrases\n   * @param  {string} phrase - Mnemonic phrase\n   * @param  {index} index - index to hdKey root\n   *\n   * @example\n   * ```javascript\n   * const mnemonic_1 = 'urge clog right example dish drill card maximum mix bachelor section select';\n   * const wallet = new Wallet(customMessenger);\n   * wallet.addByMnemonic(mnemonic_1);\n   *\n   * console.log(wallet.accounts);\n   * ```\n   */\n  addByMnemonic(phrase: string, index: number = 0) {\n    if (!this.isValidMnemonic(phrase)) {\n      throw new Error(`Invalid mnemonic phrase: ${phrase}`);\n    }\n    const seed = bip39.mnemonicToSeed(phrase);\n    const hdKey = hdkey.fromMasterSeed(seed);\n    // TODO:hdkey should apply to Avalanche's settings\n    const path = this.messenger.chainType === ChainType.Avalanche ? '1023' : '60';\n    const childKey = hdKey.derive(`m/44'/${path}'/0'/0/${index}`);\n    const privateKey = childKey.privateKey.toString('hex');\n    return this.addByPrivateKey(privateKey);\n  }\n\n  /**\n   * Add an account using privateKey\n   *\n   * @param  {string} privateKey - privateKey to add\n   * @return {Account} return added Account\n   *\n   * @example\n   * ```javascript\n   * const wallet = new Wallet(customMessenger);\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * console.log(wallet.addByPrivateKey(key_1));\n   * ```\n   */\n  addByPrivateKey(privateKey: string): Account {\n    try {\n      const newAcc = Account.add(privateKey);\n      newAcc.setMessenger(this.messenger);\n      if (newAcc.address) {\n        this.accountMap.set(newAcc.address, newAcc);\n        if (!this.defaultSigner) {\n          this.setSigner(newAcc.address);\n        }\n        return newAcc;\n      } else {\n        throw new Error('add account failed');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Add an account using privateKey\n   * @param  {string} keyStore - keystore jsonString to add\n   * @param  {string} password - password to decrypt the file\n   * @return {Account} return added Account\n   */\n  async addByKeyStore(keyStore: string, password: string): Promise<Account> {\n    try {\n      const newAcc = new Account(undefined);\n      const result = await newAcc.fromFile(keyStore, password);\n      result.setMessenger(this.messenger);\n      if (result.address) {\n        this.accountMap.set(result.address, result);\n        if (!this.defaultSigner) {\n          this.setSigner(result.address);\n        }\n        return result;\n      } else {\n        throw new Error('add account failed');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * create a new account using Mnemonic\n   * @return {Account} {description}\n   *\n   * @example\n   * ```javascript\n   * console.log(wallet.accounts);\n   * wallet.createAccount();\n   * wallet.createAccount();\n   *\n   * console.log(wallet.accounts);\n   * ````\n   */\n  async createAccount(password?: string, options?: EncryptOptions): Promise<Account> {\n    const prv = generatePrivateKey();\n    const acc = this.addByPrivateKey(prv);\n    if (acc.address && password) {\n      const encrypted = await this.encryptAccount(acc.address, password, options);\n      return encrypted;\n    } else if (acc.address && !password) {\n      return acc;\n    } else {\n      throw new Error('create acount failed');\n    }\n  }\n\n  /**\n   * To encrypt an account that lives in the wallet.\n   * if encrypted, returns original avax, if not found, throw error\n   * @param {string} address - address in accounts\n   * @param {string} password - string that used to encrypt\n   * @param {EncryptOptions} options - encryption options\n   * @return {Promise<Account>}\n   *\n   * @example\n   * ```javascript\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   * wallet.encryptAccount('avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345').then((value) => {\n   *   console.log(value);\n   * })\n   * ```\n   */\n  async encryptAccount(\n    address: string,\n    password: string,\n    options?: EncryptOptions,\n  ): Promise<Account> {\n    try {\n      const foundAcc = this.getAccount(address);\n      if (foundAcc && foundAcc.privateKey && isPrivateKey(foundAcc.privateKey)) {\n        await foundAcc.toFile(password, options);\n        return foundAcc;\n      } else if (foundAcc && foundAcc.privateKey && !isPrivateKey(foundAcc.privateKey)) {\n        return foundAcc;\n      } else {\n        throw new Error('encrypt account failed');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * To decrypt an account that lives in the wallet,if not encrypted, return original,\n   * if not found, throw error\n   * @param {string} address - address in accounts\n   * @param {string} password - string that used to encrypt\n   * @return {Promise<Account>}\n   *\n   * @example\n   * ```javascript\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   * wallet.encryptAccount('avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345')\n   * .then(() => {\n   *   wallet.decryptAccount('avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7', '12345')\n   *   .then((value) =>{\n   *      console.log(value);\n   *   });\n   * });\n   * ```\n   */\n  async decryptAccount(address: string, password: string): Promise<Account> {\n    try {\n      const foundAcc = this.getAccount(address);\n      if (foundAcc && foundAcc.privateKey && !isPrivateKey(foundAcc.privateKey)) {\n        await foundAcc.fromFile(foundAcc.privateKey, password);\n        return foundAcc;\n      } else if (foundAcc && foundAcc.privateKey && isPrivateKey(foundAcc.privateKey)) {\n        foundAcc.encrypted = false;\n        return foundAcc;\n      } else {\n        throw new Error('decrypt account failed');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get Account instance using address as param\n   * @param  {string} address - address hex\n   * @return {Account} Account instance which lives in Wallet\n   *\n   * @example\n   * ```\n   * const key_1 = '45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e';\n   * wallet.addByPrivateKey(key_1);\n   * console.log(wallet.getAccount('avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'));\n   * ```\n   */\n  getAccount(address: string): Account | undefined {\n    return this.accountMap.get(getAddress(address).basicHex);\n  }\n\n  /**\n   * @function removeAccount\n   * @memberof Wallet\n   * @description remove Account using address as param\n   * @param  {string} address: - address hex\n   */\n  removeAccount(address: string): void {\n    this.accountMap.delete(getAddress(address).basicHex);\n    if (this.defaultSigner === address) {\n      this.defaultSigner = undefined;\n    }\n  }\n\n  /**\n   * Set Customer Messenage\n   * @param messenger\n   *\n   * @example\n   * ```javascript\n   * const customMessenger = new Messenger(\n   *   new HttpProvider('https://api.s0.b.hmny.io'),\n   *   ChainType.Avalanche, // if you are connected to Avalanche's blockchain\n   *   ChainID.HmyLocal, // check if the chainId is correct\n   * )\n   * const wallet = new Wallet();\n   * wallet.setMessenger(customMessenger);\n   * console.log(wallet.messenger);\n   * ```\n   */\n  setMessenger(messenger: Messenger): void {\n    this.messenger = messenger;\n  }\n\n  /**\n   * Set signer\n   *\n   * @param address avax of the address in the accounts\n   */\n  setSigner(address: string): void {\n    if (!isAddress(address) && !this.getAccount(address)) {\n      throw new Error('could not set signer');\n    }\n    this.defaultSigner = address;\n  }\n\n  async signTransaction(\n    transaction: Transaction,\n    account: Account | undefined = this.signer,\n    // tslint:disable-next-line: no-unnecessary-initializer\n    password: string | undefined = undefined,\n    updateNonce: boolean = true,\n    encodeMode: string = 'rlp',\n    blockNumber: string = 'latest',\n  ): Promise<Transaction> {\n    const toSignWith = account || this.signer;\n    if (!toSignWith) {\n      throw new Error('no signer found or did not provide correct account');\n    }\n    if (toSignWith instanceof Account && toSignWith.encrypted && toSignWith.address) {\n      if (!password) {\n        throw new Error('must provide password to further execution');\n      }\n      try {\n        const decrypted = await this.decryptAccount(toSignWith.address, password);\n        const signed = await decrypted.signTransaction(\n          transaction,\n          updateNonce,\n          encodeMode,\n          blockNumber,\n        );\n        await this.encryptAccount(toSignWith.address, password);\n        return signed;\n      } catch (error) {\n        throw error;\n      }\n    } else if (toSignWith instanceof Account && !toSignWith.encrypted && toSignWith.address) {\n      try {\n        const signed = await toSignWith.signTransaction(\n          transaction,\n          updateNonce,\n          encodeMode,\n          blockNumber,\n        );\n        return signed;\n      } catch (error) {\n        throw error;\n      }\n    } else {\n      throw new Error('sign transaction failed');\n    }\n  }\n\n  async signStaking(\n    staking: StakingTransaction,\n    account: Account | undefined = this.signer,\n    // tslint:disable-next-line: no-unnecessary-initializer\n    password: string | undefined = undefined,\n    updateNonce: boolean = true,\n    encodeMode: string = 'rlp',\n    blockNumber: string = 'latest',\n    shardID: number = this.messenger.currentShard,\n  ): Promise<StakingTransaction> {\n    const toSignWith = account || this.signer;\n    if (!toSignWith) {\n      throw new Error('no signer found or did not provide correct account');\n    }\n    if (toSignWith instanceof Account && toSignWith.encrypted && toSignWith.address) {\n      if (!password) {\n        throw new Error('must provide password to further execution');\n      }\n      try {\n        const decrypted = await this.decryptAccount(toSignWith.address, password);\n        const signed = await decrypted.signStaking(\n          staking,\n          updateNonce,\n          encodeMode,\n          blockNumber,\n          shardID,\n        );\n        await this.encryptAccount(toSignWith.address, password);\n        return signed;\n      } catch (error) {\n        throw error;\n      }\n    } else if (toSignWith instanceof Account && !toSignWith.encrypted && toSignWith.address) {\n      try {\n        const signed = await toSignWith.signStaking(\n          staking,\n          updateNonce,\n          encodeMode,\n          blockNumber,\n          shardID,\n        );\n        return signed;\n      } catch (error) {\n        throw error;\n      }\n    } else {\n      throw new Error('sign transaction failed');\n    }\n  }\n\n  /**\n   * @function isValidMnemonic\n   * @memberof Wallet\n   * @description check if Mnemonic is valid\n   * @param  {string} phrase - Mnemonic phrase\n   * @return {boolean}\n   * @ignore\n   */\n  private isValidMnemonic(phrase: string): boolean {\n    if (phrase.trim().split(/\\s+/g).length < 12) {\n      return false;\n    }\n    return bip39.validateMnemonic(phrase);\n  }\n}\n\nexport { Wallet };\n","/**\n * @packageDocumentation\n * @module avalanche-account\n */\n\nimport { bip39, hdkey, getAddress, BN, Signature } from 'avalanche-js-crypto';\nimport {\n  HDPath,\n  // defineReadOnly,\n  isHttp,\n  isWs,\n  ChainID,\n  ChainType,\n  Unit,\n  isHex,\n  hexToNumber,\n} from 'avalanche-js-utils';\nimport { Messenger, HttpProvider, WSProvider, RPCMethod } from 'avalanche-js-network';\nimport { Transaction, TxStatus, TransasctionReceipt } from 'avalanche-js-transaction';\nimport { Account } from './account';\n\n/** @hidden */\nexport interface WalletsInterfaces {\n  [key: string]: Account;\n}\n\n/** @hidden */\nexport interface Web3TxPrams {\n  id?: string;\n  from?: string;\n  to?: string;\n  nonce?: number | string;\n  gasLimit?: BN | number | string;\n  gasPrice?: BN | number | string;\n  shardID?: number | string;\n  toShardID?: number | string;\n  data?: string;\n  value?: BN;\n  chainId?: number;\n  rawTransaction?: string;\n  unsignedRawTransaction?: string;\n  signature?: Signature | string;\n  receipt?: TransasctionReceipt;\n}\n\nexport class HDNode {\n  static isValidMnemonic(phrase: string): boolean {\n    if (phrase.trim().split(/\\s+/g).length < 12) {\n      return false;\n    }\n    return bip39.validateMnemonic(phrase);\n  }\n\n  static generateMnemonic(): string {\n    return bip39.generateMnemonic();\n  }\n\n  public provider: HttpProvider | WSProvider;\n  public gasLimit: string;\n  public gasPrice: string;\n  public messenger: Messenger;\n\n  /** @hidden */\n  private shardID: number;\n  /** @hidden */\n  private hdwallet: hdkey | undefined;\n  /** @hidden */\n  private path: string;\n  /** @hidden */\n  private index: number;\n  /** @hidden */\n  private addressCount: number;\n  /** @hidden */\n  private addresses: string[];\n  /** @hidden */\n  private wallets: WalletsInterfaces;\n\n  constructor(\n    provider: string | HttpProvider | WSProvider = 'http://localhost:9500',\n    menmonic?: string,\n    index: number = 0,\n    addressCount: number = 1,\n    shardID: number = 0,\n    chainType: ChainType = ChainType.Avalanche,\n    chainId: ChainID = ChainID.Default,\n    gasLimit = '1000000',\n    gasPrice = '2000000000',\n  ) {\n    this.provider = this.setProvider(provider);\n    this.shardID = shardID;\n    this.messenger = new Messenger(this.provider, chainType, chainId);\n    this.messenger.setDefaultShardID(this.shardID);\n    this.hdwallet = undefined;\n    this.addresses = [];\n    this.wallets = {};\n    this.path = chainType === ChainType.Avalanche ? HDPath : `m/44'/60'/0'/0/`;\n    this.index = index;\n    this.addressCount = addressCount;\n    this.getHdWallet(menmonic || HDNode.generateMnemonic());\n    this.gasLimit = gasLimit;\n    this.gasPrice = gasPrice;\n  }\n\n  normalizePrivateKeys(mnemonic: string | string[]) {\n    if (Array.isArray(mnemonic)) {\n      return mnemonic;\n    } else if (mnemonic && !mnemonic.includes(' ')) {\n      return [mnemonic];\n    } else {\n      return false;\n    }\n  }\n\n  setProvider(provider: string | HttpProvider | WSProvider) {\n    if (isHttp(provider) && typeof provider === 'string') {\n      return new HttpProvider(provider);\n    } else if (provider instanceof HttpProvider) {\n      return provider;\n    } else if (isWs(provider) && typeof provider === 'string') {\n      return new WSProvider(provider);\n    } else if (provider instanceof WSProvider) {\n      return provider;\n    } else {\n      throw new Error('provider is not recognized');\n    }\n  }\n\n  getHdWallet(mnemonic: string) {\n    if (!HDNode.isValidMnemonic(mnemonic)) {\n      throw new Error('Mnemonic invalid or undefined');\n    }\n    this.hdwallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(mnemonic));\n\n    for (let i = this.index; i < this.index + this.addressCount; i++) {\n      if (!this.hdwallet) {\n        throw new Error('hdwallet is not found');\n      }\n      const childKey = this.hdwallet.derive(`${this.path}${i}`);\n      const prv = childKey.privateKey.toString('hex');\n      const account = new Account(prv);\n      const addr = account.checksumAddress;\n      this.addresses.push(addr);\n      this.wallets[addr] = account;\n    }\n  }\n\n  // tslint:disable-next-line: ban-types\n  getAccounts(cb?: Function) {\n    if (cb) {\n      cb(null, this.addresses);\n    }\n    return this.addresses;\n  }\n  // tslint:disable-next-line: ban-types\n  getPrivateKey(address: string, cb?: Function) {\n    if (!cb) {\n      if (!this.wallets[address]) {\n        throw new Error('Account not found');\n      } else {\n        return this.wallets[address].privateKey;\n      }\n    }\n    if (!this.wallets[address]) {\n      return cb('Account not found');\n    } else {\n      cb(null, this.wallets[address].privateKey);\n    }\n  }\n  // tslint:disable-next-line: ban-types\n  async signTransaction(txParams: any | Web3TxPrams) {\n    const from: string = txParams.from ? getAddress(txParams.from).checksum : '0x';\n    const accountNonce = await this.messenger.send(\n      RPCMethod.GetAccountNonce,\n      [from, 'latest'],\n      'hmy',\n      this.shardID,\n    );\n\n    const to: string = txParams.to ? getAddress(txParams.to).checksum : '0x';\n\n    let gasLimit = new Unit('0').asWei().toWei();\n\n    if (txParams.gas !== undefined && isHex(txParams.gas)) {\n      gasLimit = new Unit(txParams.gas)\n        .asWei()\n        .toWei()\n        .lt(new Unit(this.gasLimit).asWei().toWei())\n        ? new Unit(txParams.gas).asWei().toWei()\n        : new Unit(this.gasLimit).asWei().toWei();\n    }\n    if (txParams.gasLimit !== undefined && isHex(txParams.gasLimit)) {\n      gasLimit = new Unit(txParams.gasLimit)\n        .asWei()\n        .toWei()\n        .lt(new Unit(this.gasLimit).asWei().toWei())\n        ? new Unit(txParams.gasLimit).asWei().toWei()\n        : new Unit(this.gasLimit).asWei().toWei();\n    }\n\n    let gasPrice = new Unit('0').asWei().toWei();\n    if (txParams.gasPrice !== undefined && isHex(txParams.gasPrice)) {\n      gasPrice = new Unit(txParams.gasPrice)\n        .asWei()\n        .toWei()\n        .lt(new Unit(this.gasPrice).asWei().toWei())\n        ? new Unit(txParams.gasPrice).asWei().toWei()\n        : new Unit(this.gasPrice).asWei().toWei();\n    }\n\n    const value = txParams.value !== undefined && isHex(txParams.value) ? txParams.value : '0';\n    const nonce =\n      txParams.nonce !== undefined && isHex(txParams.nonce)\n        ? Number.parseInt(hexToNumber(txParams.nonce), 10)\n        : accountNonce.result;\n    const data = txParams.data !== undefined && isHex(txParams.data) ? txParams.data : '0x';\n    const prv = this.wallets[from].privateKey;\n\n    const signerAccount = new Account(prv, this.messenger);\n\n    const tx = new Transaction(\n      {\n        ...txParams,\n        from,\n        to,\n        gasLimit,\n        gasPrice,\n        value,\n        nonce,\n        data,\n        shardID: this.shardID,\n        chainId: this.messenger.chainId,\n      },\n      this.messenger,\n      TxStatus.INTIALIZED,\n    );\n\n    const signed = await signerAccount.signTransaction(tx);\n\n    return signed.getRawTransaction();\n  }\n  getAddress(idx?: number) {\n    if (!idx) {\n      return this.addresses[0];\n    } else {\n      return this.addresses[idx];\n    }\n  }\n  getAddresses() {\n    return this.addresses;\n  }\n  addByPrivateKey(privateKey: string) {\n    const account = new Account(privateKey);\n    const addr = account.checksumAddress;\n    this.addresses.push(addr);\n    this.wallets[addr] = account;\n    return addr;\n  }\n\n  setSigner(address: string) {\n    const foundIndex = this.addresses.findIndex((value) => value === address);\n    this.addresses.slice(foundIndex, foundIndex + 1);\n    this.addresses.unshift(address);\n  }\n}\n"],"names":["defaultMessenger","Messenger","HttpProvider","ChainType","Avalanche","ChainID","HmyLocal","Account","key","messenger","_new","_import","shardID","currentShard","shards","Map","set","address","bech32Address","AddressSuffix","balance","nonce","newAcc","add","toFile","password","options","privateKey","isPrivateKey","encrypt","file","encrypted","Error","fromFile","keyStore","JSON","parse","toLowerCase","decrypt","decyptedPrivateKey","getBalance","blockNumber","send","RPCMethod","GetBalance","chainPrefix","GetTransactionCount","isError","error","message","hexToNumber","result","Number","parseInt","updateBalances","shardProviders","size","name","val","getShardBalance","balanceObject","signTransaction","transaction","updateNonce","encodeMode","txShardID","txParams","getShardNonce","shardNonce","setParams","from","checksumAddress","RLPSign","signature","rawTransaction","map","obj","signStaking","staking","setFromAddress","setNonce","rlpSign","setRawTransaction","setSignature","setMessenger","getAddressFromShardID","shardObject","get","undefined","getAddresses","addressArray","index","GetAccountNonce","prv","generatePrivateKey","add0xToString","publicKey","getPubkeyFromPrivateKey","getAddressFromPrivateKey","getAddress","checksum","bech32","bech32TestNet","Wallet","generateMnemonic","bip39","newMnemonic","addByMnemonic","phrase","isValidMnemonic","seed","mnemonicToSeed","hdKey","hdkey","fromMasterSeed","path","chainType","childKey","derive","toString","addByPrivateKey","accountMap","defaultSigner","setSigner","addByKeyStore","createAccount","acc","encryptAccount","foundAcc","getAccount","decryptAccount","basicHex","removeAccount","isAddress","account","signer","toSignWith","decrypted","signed","trim","split","length","validateMnemonic","keys","accounts","HDNode","provider","menmonic","addressCount","chainId","gasLimit","gasPrice","Default","setProvider","setDefaultShardID","hdwallet","addresses","wallets","HDPath","getHdWallet","normalizePrivateKeys","mnemonic","Array","isArray","includes","isHttp","isWs","WSProvider","i","addr","push","getAccounts","cb","getPrivateKey","accountNonce","to","Unit","asWei","toWei","gas","isHex","lt","value","data","signerAccount","tx","Transaction","TxStatus","INTIALIZED","getRawTransaction","idx","foundIndex","findIndex","slice","unshift"],"mappings":"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"}